#!/usr/bin/python 
# -*- coding: utf-8 -*- 

## Replace your name and email. 
# Ibrahim Khalil <onucsecu@gmail.com> 

## Here you must add the license of the file, replace "MyProgram" with your program name. 
# License: 
#    MyProgram is free software: you can redistribute it and/or modify 
#    it under the terms of the GNU General Public License as published by 
#    the Free Software Foundation, either version 3 of the License, or 
#    (at your option) any later version. 
# 
#    MyProgram is distributed in the hope that it will be useful, 
#    but WITHOUT ANY WARRANTY; without even the implied warranty of 
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
#    GNU General Public License for more details. 
# 
#    You should have received a copy of the GNU General Public License 
#    along with MyProgram.  If not, see <http://www.gnu.org/licenses/>. 

from __future__ import unicode_literals
import gi, sys, gobject
import threading
import youtube_dl
from gi._gi import GObject

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib
from pathlib import Path

import os

path = os.path.expanduser('~') + '/Videos/'


class tubecatcher:
    def __init__(self):
        self.gladefile = '/usr/lib/tubecatcher/ui.glade'
        #self.gladefile = 'ui.glade'
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        self.builder.connect_signals(self)
        self.window = self.builder.get_object("form")
        self.about=self.builder.get_object("aboutDialogue")
        self.progressbar = self.builder.get_object('progressbar')
        self.progressbar.set_fraction(0.0)
        self.textview = self.builder.get_object('status')
        self.ennum = self.builder.get_object('ennum')
        self.stnum = self.builder.get_object('stnum')
        # self.timeout_id = GLib.timeout_add(50, self.on_timeout, None)
        self.output = self.builder.get_object('output')
        self.output.set_text("Output : " + path)
        self.activity_mode = False
        self.value = 0.0
        self.prev = 0.0
        self.nopl = True
        self.st = 0
        self.en = 0
        self.status = "Processing..."
        self.window.show()

    def onAbout(self, widget):
        #print('about clicked')
        self.about.show()
    def onAboutDestroy(self,widget):
    	print('dialog closed')
    	self.about.destroy()
    def onSave(self, widget):
        print('save clicked')

    def onQuit(self, widget):
        print('exit')
        sys.exit(0)

    def on_update_status(self):
        self.textbuffer = self.textview.get_buffer()
        self.textbuffer.set_text(self.status)

    def on_progressbar(self):
        self.on_update_status()
        if self.activity_mode:
            self.progressbar.pulse()
        else:
            # new_value = self.progressbar.get_fraction() + self.value
            new_value = self.value / 100
            # print(new_value)
            if new_value > 1:
                new_value = 0

            self.progressbar.set_fraction(new_value)
        return True

    def disable_entry(self):
        GLib.idle_add(self.disable_entry)
        if self.nopl:
            self.stnum.set_sensitive(False)
            self.ennum.set_sensitive(False)
        else:
            self.stnum.set_sensitive(True)
            self.ennum.set_sensitive(True)

    def on_toggle_playlist(self, widget, data=None):
        value = widget.get_active()
        self.nopl = not value;
        print(self.nopl)
        thread = threading.Thread(target=self.disable_entry)
        thread.daemon = True
        thread.start()

        # print(type(value))

    def download_proc(self, button, data=None):
        GLib.idle_add(self.on_progressbar)
        self.urlentry = self.builder.get_object('urlentry')
        url = self.urlentry.get_text()
        print(url)
        print(self.nopl)
        if self.nopl:
            self.st = 0
            self.en = 0
        else:
            self.st = int(self.stnum.get_text())
            self.en = int(self.ennum.get_text())

        # print(str(nopl)+"= nopl st="+st+" en ="+en)

        def my_hook(d):
            # GLib.idle_add(self.on_progressbar)
            try:
                str = d['_percent_str']
                fval = float(str.replace('%', ''))
                self.value = fval
                self.status = d['status'] + ' ' + d['_percent_str'] + ' ' + d['filename']
                GLib.idle_add(self.on_progressbar)
                # Glib.idle_add(self.on_update_status)
                # print("******this is print "+self.value)
            except:
                print("jhamela")
                self.status = "closed"
                # Glib.idle_add(self.on_update_status)
            # d['status'] + d['_percent_str']
            if d['status'] == 'finished':
                self.status = "Done"

                # Glib.idle_add(self.on_update_status)
                print('downloading sesh')

        ydl_opts = {
            'format': 'best',
            'outtmpl': path + '%(title)s' + '.%(ext)s',
            'noplaylist': self.nopl,
            'playliststart': self.st,
            'playlistend': self.en,
            'progress_hooks': [my_hook],
        }

        def helloCallBack(url):
            with youtube_dl.YoutubeDL(ydl_opts) as ydl:
                # print(url)
                try:
                    ydl.download([url])
                except:
                    print("Error Occured")
                    self.status = "Error Occured"
                    GLib.idle_add(self.on_progressbar)

        thread = threading.Thread(name='triggered', target=helloCallBack, args=[url, ])
        thread.daemon = True
        thread.start()
        # helloCallBack(url)

    def stnum_activate_cb(self, entry, data=None):
        stnum = entry.get_text()
        st = int(stnum)

    def ennum_activate_cb(self, entry, data=None):
        ennum = entry.get_text()
        en = int(ennum)


'''abuilder = Gtk.Builder()
abuilder.add_from_file('Design.glade')
abuilder.connect_signals(aClassthatHandleSignale)
form=abuilder.get_object('form')
form.show()
Gtk.main()'''
if __name__ == "__main__":
    main = tubecatcher()
    Gtk.main()

    # https://youtu.be/zlAPYE8MZJs?list=RDzlAPYE8MZJs
    # https://www.youtube.com/playlist?list=PLx0sYbCqOb8QTF1DCJVfQrtWknZFzuoAE
